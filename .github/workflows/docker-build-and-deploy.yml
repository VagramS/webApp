name: Build, Test, Push Docker Image to ECR, and Deploy to EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Login to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Create .env file for Docker Compose (correctly strip 'http://' or 'https://')
      - name: Create .env file
        run: |
          echo "PORT=3000" >> .env
          echo "EMAIL_ADDRESS=${{ secrets.EMAIL_ADDRESS }}" >> .env
          echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "CLOUDWATCH_LOG_GROUP_NAME=${{ secrets.CLOUDWATCH_LOG_GROUP_NAME }}" >> .env
          echo "CLOUDWATCH_STREAM_NAME=${{ secrets.CLOUDWATCH_STREAM_NAME }}" >> .env
          echo "AWS_EC2_REGION=${{ secrets.AWS_EC2_REGION }}" >> .env
          echo "AWS_ECR_REPOSITORY_NAME=${{ secrets.AWS_ECR_REPOSITORY_NAME }}" >> .env
          echo "AWS_ECR_REPOSITORY_URI=${{ secrets.AWS_ECR_REPOSITORY_URI }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          # Set SWAGGER_URL for EC2 without 'http://'
          echo "SWAGGER_URL=$(echo ${{ secrets.SWAGGER_URL }} | sed 's|^[^/]*//||')" >> .env

      # Step 6: Build and tag Docker image
      - name: Build and tag Docker image
        run: |
          docker build -t webapp:latest .

      # Step 7: Run tests
      - name: Run tests
        run: |
          docker run --rm webapp:latest npm test

      # Step 8: Tag the image for ECR
      - name: Tag image for ECR
        run: |
          docker tag webapp:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/webapp:latest

      # Step 9: Push the Docker image to Amazon ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/webapp:latest

      # Step 10: Set up SSH and run docker-compose up on EC2
      - name: Deploy to EC2 and Run Docker Compose
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 400 private_key.pem
          SSH_OPTIONS="-i private_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
          scp $SSH_OPTIONS docker-compose.yml ec2-user@${{ secrets.SSH_SERVER }}:/home/ec2-user/docker-compose.yml
          scp $SSH_OPTIONS .env ec2-user@${{ secrets.SSH_SERVER }}:/home/ec2-user/.env
          ssh $SSH_OPTIONS ec2-user@${{ secrets.SSH_SERVER }} "docker-compose down || true"
          ssh $SSH_OPTIONS ec2-user@${{ secrets.SSH_SERVER }} "docker-compose up -d"
